properties([
	parameters([
		string(name: 'COMMITISH_SDK', description: 'Commit-ish of LiskHQ/lisk-sdk to use', defaultValue: 'development' ),
	])
])

pipeline {
	agent { node { label 'lisk-core' } }
	options { skipDefaultCheckout() }
	stages {
		stage('Checkout SCM') {
			steps {
				cleanWs()
				dir('lisk-sdk') {
					checkout([$class: 'GitSCM', branches: [[name: "${params.COMMITISH_SDK}" ]], userRemoteConfigs: [[url: 'https://github.com/LiskHQ/lisk-sdk']]])
				}
				dir('lisk-core') {
					checkout scm
				}
			}
		}
		stage('Build SDK') {
			steps {
				dir('lisk-sdk') {
					nvm(readFile(".nvmrc").trim()) {
						sh '''
						npm install --global yarn
						yarn
						yarn build
						npx lerna exec yarn link
						npx lerna --loglevel error list >../packages
						'''
					}
				}
			}
		}
		stage('Build Core') {
			steps {
				dir('lisk-core') {
					nvm(readFile(".nvmrc").trim()) {
						sh '''
						npm install --registry https://npm.lisk.com/
						npm install --global yarn
						for package in $( cat ../packages ); do
						  yarn link "$package"
						done
						npm run build
						'''
					}
				}
			}
		}
		stage('Lint Core') {
			steps {
				dir('lisk-core') {
					nvm(readFile(".nvmrc").trim()) {
						sh 'npm run lint'
					}
				}
			}
		}
		stage('Format Core') {
			steps {
				dir('lisk-core') {
					nvm(readFile(".nvmrc").trim()) {
						sh '''
						npm run format
						if [ -z "$(git status --untracked-files=no --porcelain)" ]; then
							echo "All files formatted"
						else
							echo "Running format is required"
							exit 1
						fi
						'''
					}
				}
			}
		}
		stage('Test Core') {
			steps {
				dir('lisk-core') {
					nvm(readFile(".nvmrc").trim()) {
						sh 'npm test'
					}
				}
			}
		}
	}
}
// vim: filetype=groovy
